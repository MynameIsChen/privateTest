apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'
//apply plugin: 'com.android.databinding'
//apply plugin: 'com.android.application'
//添加如下代码，应用apt插件
//apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.chen.test"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'arm64-v8a'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
//            exclude 'META-INF/NOTICE'
//            exclude 'META-INF/LICENSE'
//            exclude 'META-INF/LICENSE.txt'
//            exclude 'META-INF/NOTICE.txt'
        }

        multiDexEnabled true
    }

    // 开启lambda表达式
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    signingConfigs {
        release {
            storeFile file('./hrbsafe.jks')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        debug {
            storeFile file('./hrbsafe.jks')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all {
        //判断是release还是debug版本
        def buildType = it.buildType.name
        def fileName
        //渠道号
        def channel = it.productFlavors[0].name.split("-")[0]
        //时间格式
        def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
        //只是对release包起作用，
        if (buildType == "release") {
            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk")
        }
        it.outputs.each {
            //只对release包起作用，如果不是Release包则不改变名称
            if (buildType == "release") {
                //命名规则是：渠道名_项目名_版本名_创建时间_构建类型.apk
                fileName = "${channel}_app_v${defaultConfig.versionName}_${createTime}_${buildType}.apk"
                //打印名字
                println("文件名：------------${fileName}")
                //重新对apk命名，适用Gradle4.0以下版本
//                it.outputFile = new File(it.outputFile.parent, fileName)
                //适用于Gradle4.0及以上版本
                it.outputFileName = fileName
            }
        }
    }

    flavorDimensions "test"
    productFlavors {
        huawei {}
        xiaomi {}
        samsung {}
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation("com.github.hotchemi:permissionsdispatcher:3.0.1") {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:3.0.1"
    implementation 'com.github.qiujayen:sticky-layoutmanager:1.0.1'
    //arouter
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.4'
    // 分包
    implementation "com.android.support:multidex:1.0.3"
    implementation "org.java-websocket:Java-WebSocket:1.3.0"
    /*butterKnife*/
    implementation "com.jakewharton:butterknife:$rootProject.ext.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butterknifeVersion"
    /*dagger2*/
    implementation "com.google.dagger:dagger:$rootProject.ext.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.ext.daggerCompiler"
    compileOnly "javax.annotation:jsr250-api:$rootProject.ext.jsr250Api"
    implementation "javax.inject:javax.inject:$rootProject.ext.javaxInject"
    //内存泄露检查
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.ext.leakcanary"
    // 查看数据库
    implementation "com.facebook.stetho:stetho:$rootProject.ext.stetho"
    /*数据库*/
    implementation "org.litepal.android:core:$rootProject.ext.litepalVersion"

    /*RxJava*/
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjava2_version"

    /*RxBinding*/
    implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.ext.rxbinding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rootProject.ext.rxbinding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:$rootProject.ext.rxbinding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-design:$rootProject.ext.rxbinding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:$rootProject.ext.rxbinding_version"
    /*fragment*/
    implementation "me.yokeyword:fragmentation:$rootProject.ext.fragment_version"
    /*adapter*/
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:$rootProject.ext.adapter_version"


    implementation project(':common')
    implementation project(':core')
    implementation project(':router')

}
